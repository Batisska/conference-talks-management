#!/usr/bin/env bash

echo

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=
fi

# If you want to allow non-ASCII filenames set this variable to true
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr
exec 1>&2

#################
# Terminal Colors
#################

###
# Regular
###
color_regular_black='\033[0;30m'
color_regular_red='\033[0;31m'
color_regular_green='\033[0;32m'
color_regular_yellow='\033[0;33m'
color_regular_blue='\033[0;34m'
color_regular_purple='\033[0;35m'
color_regular_cyan='\033[0;36m'
color_regular_white='\033[0;37m'

###
# Bold
###
color_bold_black='\033[1;30m'
color_bold_red='\033[1;31m'
color_bold_green='\033[1;32m'
color_bold_yellow='\033[1;33m'
color_bold_blue='\033[1;34m'
color_bold_purple='\033[1;35m'
color_bold_cyan='\033[1;36m'
color_bold_white='\033[1;37m'

###
# Underline
###
color_underline_black='\033[4;30m'
color_underline_red='\033[4;31m'
color_underline_green='\033[4;32m'
color_underline_yellow='\033[4;33m'
color_underline_blue='\033[4;34m'
color_underline_purple='\033[4;35m'
color_underline_cyan='\033[4;36m'
color_underline_white='\033[4;37m'

###
# Background
###
color_background_black='\033[40m'
color_background_red='\033[41m'
color_background_green='\033[42m'
color_background_yellow='\033[43m'
color_background_blue='\033[44m'
color_background_purple='\033[45m'
color_background_cyan='\033[46m'
color_background_white='\033[47m'

color_reset='\033[0m'

###########
# Functions
###########

function message_failure() {
    printf "${color_bold_white}${color_background_red} 🤦  $1 ${color_reset}\n"
}

function message_success() {
    printf "${color_bold_black}${color_background_green} $1 🍺  ${color_reset}\n"
}

function message_warning() {
    printf "${color_bold_black}${color_background_yellow} ⚠️ $1 ${color_reset}\n"
}

function message_info() {
    printf "${color_bold_black}${color_background_blue} ☝️️  $1 ${color_reset}\n"
}

##############
# Files Staged
##############

# Create empty errors array
declare -a errors

# Fetch all changed php files and validate them
# This will check only staged files to be commited
files=$(git diff --cached --name-only --diff-filter=ACM $against | grep '\.php$' | grep -Ev '\.(blade.php|txt)$' | grep -Ev '(_ide_helper.php)$')

# Project folder
project=$(git rev-parse --show-toplevel)

for relative_file_path in $files
do
    staged_files="$staged_files $(git rev-parse --show-toplevel)/$relative_file_path"
done

# Replace first blank only
staged_files=${staged_files/ /''}

# Separated by spaces
staged_files_separated_by_spaces=$staged_files

# Remove blank spaces with comma | Separated by commas
staged_files_separated_by_comma=${staged_files// /,}

###################
# PHP LINT + PHPCBF
###################

if [ -n "$files" ]; then

    echo "╭──────────────────────────────────╮"
    printf "|〈〈〈 ${color_bold_white}Checking PHP Lint...${color_reset} 〉〉〉|\n"
    echo "╰──────────────────────────────────╯"
    echo

    # Check for errors when running PHP LINT
    php_lint_errors=false

    for file in $files; do

        # Check if they are valid php files
        php_lint_output=`php -l -d display_errors=On $file 2>&1 | grep 'PHP Parse error:'`

        # If it did contain errors, we have output
        if [ -n "$php_lint_output" ]; then
            # Printing error message
            message_failure "$php_lint_output"

            # Adding error message
            errors=("${errors[@]}" "$php_lint_output")

            php_lint_errors=true
        fi
    done

    if [ "$php_lint_errors" = false ]; then
        message_success 'No Errors Found - PHP Lint(Syntax check only)'
    else
        exit 1
    fi

    # If we have errors, exit with 1
    if [ -n "$errors" ]; then
        message_failure 'Please check the terminal output and solve the errors!'
        exit 1
    fi

    echo

    echo "╭─────────────────────────────────────────╮"
    printf "|〈〈〈 ${color_bold_white}Running PHP Code Beautifier${color_reset} 〉〉〉|\n"
    echo "╰─────────────────────────────────────────╯"
    echo

    # Default command via install local project package with Composer (Depot Manager for PHP)
    phpcbf_vendor_bin="./vendor/bin/phpcbf"

    # Standard command via composer global installation
    phpcbf_global_bin="phpcbf"

    # Verifying command default based on existing conditions
    if [ -f "$phpcbf_vendor_bin" ]; then
        phpcbf_bin=$phpcbf_vendor_bin
    else
        if hash phpcbf 2>/dev/null; then
            phpcbf_bin=$phpcbf_global_bin
        else
            message_warning "No valid PHP Code Beautifier executable found! Please have one available as either $phpcbf_vendor_bin, $phpcbf_global_bin"
            message_info "Visit: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically"
            echo
            exit 1
        fi
    fi

    # Arguments both for use for PHPCBF
    phpcbf_arguments="--colors --tab-width=4 --encoding=utf-8 --extensions=php --report=full --report-width=auto -q"

    # Check for errors when running PHPCBF
    phpcbf_errors=false

    printf "${color_bold_black}${color_background_yellow}Use PHPCBF To Fix Problems${color_reset} ${color_bold_green}phpcbf${color_reset}${color_bold_yellow} ${phpcbf_arguments} ${color_bold_purple}{FILES OR FOLDER}${color_reset}\n"
    echo

    for file in $files; do
        # Run PHP Code Beautifier and Fixer the file | Begin PHP Code Beautifier and Fixer
        phpcbf_output=`$phpcbf_bin $phpcbf_arguments $file`

        if echo "$phpcbf_output" | grep -q "PHPCBF RESULT SUMMARY"; then
            # Display PHPCBF filtered output
            printf "${phpcbf_output}\n"

            phpcbf_errors=true
        fi
    done

    if [ "$phpcbf_errors" = false ]; then
        message_success 'No Fixes Found - PHP Code Beautifier'
    fi
fi

exit 0
